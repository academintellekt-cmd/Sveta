// –ê–Ω–∏–º–∞—Ü–∏–∏ –º–∞–Ω–¥–∞–ª—ã –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã

let mandalaAnimationId = null;
let mandalaRotation = 0;

// –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –º–∞–Ω–¥–∞–ª—ã
function startMandalaAnimation() {
    const canvas = document.getElementById('mandalaCanvas');
    const ctx = canvas.getContext('2d');
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
    const size = canvas.width;
    const centerX = size / 2;
    const centerY = size / 2;
    
    mandalaRotation = 0;
    
    function animate() {
        // –û—á–∏—Å—Ç–∫–∞ canvas
        ctx.clearRect(0, 0, size, size);
        
        // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–ª–µ–¥–∞
        ctx.fillStyle = 'rgba(10, 14, 26, 0.1)';
        ctx.fillRect(0, 0, size, size);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ
        mandalaRotation += 0.01;
        
        // –†–∏—Å—É–µ–º –º–∞–Ω–¥–∞–ª—É
        drawMandala(ctx, centerX, centerY, mandalaRotation);
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        mandalaAnimationId = requestAnimationFrame(animate);
    }
    
    animate();
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
function stopMandalaAnimation() {
    if (mandalaAnimationId) {
        cancelAnimationFrame(mandalaAnimationId);
        mandalaAnimationId = null;
    }
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –º–∞–Ω–¥–∞–ª—ã
function drawMandala(ctx, centerX, centerY, rotation) {
    const layers = 6;
    const maxRadius = 180;
    
    ctx.save();
    ctx.translate(centerX, centerY);
    
    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä—É–≥
    drawGlowingCircle(ctx, 0, 0, 20, 'rgba(168, 85, 247, 0.8)');
    
    // –°–ª–æ–∏ –º–∞–Ω–¥–∞–ª—ã
    for (let layer = 1; layer <= layers; layer++) {
        const radius = (maxRadius / layers) * layer;
        const petals = 6 + layer * 2;
        const layerRotation = rotation * (layer % 2 === 0 ? 1 : -1);
        
        ctx.save();
        ctx.rotate(layerRotation);
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä—É–≥ —Å–ª–æ—è
        drawCircle(ctx, 0, 0, radius, `rgba(168, 85, 247, ${0.1 / layer})`);
        
        // –õ–µ–ø–µ—Å—Ç–∫–∏/—É–∑–æ—Ä—ã
        for (let i = 0; i < petals; i++) {
            const angle = (Math.PI * 2 / petals) * i;
            const x = Math.cos(angle) * radius;
            const y = Math.sin(angle) * radius;
            
            // –ú–∞–ª–µ–Ω—å–∫–∏–µ –∫—Ä—É–≥–∏
            const color = layer % 2 === 0 ? 
                `rgba(59, 130, 246, ${0.5 / layer})` : 
                `rgba(236, 72, 153, ${0.5 / layer})`;
            drawGlowingCircle(ctx, x, y, 8 / layer, color);
            
            // –õ–∏–Ω–∏–∏ –∫ —Ü–µ–Ω—Ç—Ä—É
            ctx.strokeStyle = `rgba(168, 85, 247, ${0.2 / layer})`;
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.moveTo(0, 0);
            ctx.lineTo(x, y);
            ctx.stroke();
        }
        
        // –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É–∑–æ—Ä—ã
        if (layer % 2 === 0) {
            drawGeometricPattern(ctx, radius, petals, layerRotation);
        }
        
        ctx.restore();
    }
    
    // –í—Ä–∞—â–∞—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
    drawRotatingSymbols(ctx, rotation);
    
    ctx.restore();
}

// –ö—Ä—É–≥ —Å —Å–≤–µ—á–µ–Ω–∏–µ–º
function drawGlowingCircle(ctx, x, y, radius, color) {
    ctx.save();
    
    // –í–Ω–µ—à–Ω–µ–µ —Å–≤–µ—á–µ–Ω–∏–µ
    const gradient = ctx.createRadialGradient(x, y, 0, x, y, radius * 2);
    gradient.addColorStop(0, color);
    gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');
    
    ctx.fillStyle = gradient;
    ctx.beginPath();
    ctx.arc(x, y, radius * 2, 0, Math.PI * 2);
    ctx.fill();
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä—É–≥
    ctx.fillStyle = color;
    ctx.beginPath();
    ctx.arc(x, y, radius, 0, Math.PI * 2);
    ctx.fill();
    
    ctx.restore();
}

// –û–±—ã—á–Ω—ã–π –∫—Ä—É–≥
function drawCircle(ctx, x, y, radius, color) {
    ctx.strokeStyle = color;
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.arc(x, y, radius, 0, Math.PI * 2);
    ctx.stroke();
}

// –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —É–∑–æ—Ä
function drawGeometricPattern(ctx, radius, sides, rotation) {
    ctx.save();
    ctx.strokeStyle = 'rgba(6, 182, 212, 0.3)';
    ctx.lineWidth = 1.5;
    
    ctx.beginPath();
    for (let i = 0; i <= sides; i++) {
        const angle = (Math.PI * 2 / sides) * i;
        const x = Math.cos(angle) * radius;
        const y = Math.sin(angle) * radius;
        
        if (i === 0) {
            ctx.moveTo(x, y);
        } else {
            ctx.lineTo(x, y);
        }
    }
    ctx.closePath();
    ctx.stroke();
    
    ctx.restore();
}

// –í—Ä–∞—â–∞—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
function drawRotatingSymbols(ctx, rotation) {
    const symbols = ['‚ú®', 'üåü', 'üí´', '‚≠ê'];
    const symbolRadius = 150;
    
    ctx.save();
    ctx.font = '24px Inter';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    
    symbols.forEach((symbol, index) => {
        const angle = (Math.PI * 2 / symbols.length) * index + rotation * 2;
        const x = Math.cos(angle) * symbolRadius;
        const y = Math.sin(angle) * symbolRadius;
        
        // –°–≤–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        ctx.shadowColor = 'rgba(168, 85, 247, 0.8)';
        ctx.shadowBlur = 20;
        
        ctx.fillStyle = '#ffffff';
        ctx.fillText(symbol, x, y);
    });
    
    ctx.restore();
}

// –≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
function createParticleEffect(canvas) {
    const ctx = canvas.getContext('2d');
    const particles = [];
    
    for (let i = 0; i < 50; i++) {
        particles.push({
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            vx: (Math.random() - 0.5) * 2,
            vy: (Math.random() - 0.5) * 2,
            size: Math.random() * 3 + 1,
            opacity: Math.random()
        });
    }
    
    function animateParticles() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        particles.forEach(p => {
            p.x += p.vx;
            p.y += p.vy;
            
            if (p.x < 0 || p.x > canvas.width) p.vx *= -1;
            if (p.y < 0 || p.y > canvas.height) p.vy *= -1;
            
            ctx.fillStyle = `rgba(168, 85, 247, ${p.opacity})`;
            ctx.beginPath();
            ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
            ctx.fill();
        });
        
        requestAnimationFrame(animateParticles);
    }
    
    animateParticles();
}

// –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –≤ SVG –¥–ª—è –∫–æ–ª—å—Ü–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
document.addEventListener('DOMContentLoaded', () => {
    const ring = document.getElementById('compatRing');
    if (ring) {
        const svg = ring.closest('svg');
        const defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
        const gradient = document.createElementNS('http://www.w3.org/2000/svg', 'linearGradient');
        gradient.setAttribute('id', 'compatGradient');
        gradient.setAttribute('x1', '0%');
        gradient.setAttribute('y1', '0%');
        gradient.setAttribute('x2', '100%');
        gradient.setAttribute('y2', '100%');
        
        const stop1 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
        stop1.setAttribute('offset', '0%');
        stop1.setAttribute('stop-color', '#a855f7');
        
        const stop2 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
        stop2.setAttribute('offset', '50%');
        stop2.setAttribute('stop-color', '#ec4899');
        
        const stop3 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
        stop3.setAttribute('offset', '100%');
        stop3.setAttribute('stop-color', '#06b6d4');
        
        gradient.appendChild(stop1);
        gradient.appendChild(stop2);
        gradient.appendChild(stop3);
        defs.appendChild(gradient);
        svg.insertBefore(defs, svg.firstChild);
    }
});

