// –†–∞—Å—á—ë—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏

// –ó–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞
const zodiacSigns = [
    { name: '–û–≤–µ–Ω', start: '03-21', end: '04-19', element: 'fire', icon: '‚ôà' },
    { name: '–¢–µ–ª–µ—Ü', start: '04-20', end: '05-20', element: 'earth', icon: '‚ôâ' },
    { name: '–ë–ª–∏–∑–Ω–µ—Ü—ã', start: '05-21', end: '06-20', element: 'air', icon: '‚ôä' },
    { name: '–†–∞–∫', start: '06-21', end: '07-22', element: 'water', icon: '‚ôã' },
    { name: '–õ–µ–≤', start: '07-23', end: '08-22', element: 'fire', icon: '‚ôå' },
    { name: '–î–µ–≤–∞', start: '08-23', end: '09-22', element: 'earth', icon: '‚ôç' },
    { name: '–í–µ—Å—ã', start: '09-23', end: '10-22', element: 'air', icon: '‚ôé' },
    { name: '–°–∫–æ—Ä–ø–∏–æ–Ω', start: '10-23', end: '11-21', element: 'water', icon: '‚ôè' },
    { name: '–°—Ç—Ä–µ–ª–µ—Ü', start: '11-22', end: '12-21', element: 'fire', icon: '‚ôê' },
    { name: '–ö–æ–∑–µ—Ä–æ–≥', start: '12-22', end: '01-19', element: 'earth', icon: '‚ôë' },
    { name: '–í–æ–¥–æ–ª–µ–π', start: '01-20', end: '02-18', element: 'air', icon: '‚ôí' },
    { name: '–†—ã–±—ã', start: '02-19', end: '03-20', element: 'water', icon: '‚ôì' }
];

// –≠–ª–µ–º–µ–Ω—Ç—ã
const elements = {
    fire: { name: '–û–≥–æ–Ω—å', compatible: ['fire', 'air'], icon: 'üî•' },
    earth: { name: '–ó–µ–º–ª—è', compatible: ['earth', 'water'], icon: 'üåç' },
    air: { name: '–í–æ–∑–¥—É—Ö', compatible: ['air', 'fire'], icon: 'üí®' },
    water: { name: '–í–æ–¥–∞', compatible: ['water', 'earth'], icon: 'üíß' }
};

// –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ø–æ –¥–∞—Ç–µ
function getZodiacSign(dateString) {
    const date = new Date(dateString);
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const checkDate = `${month}-${day}`;
    
    for (const sign of zodiacSigns) {
        // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ö–æ–∑–µ—Ä–æ–≥–∞ (–ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –≥–æ–¥)
        if (sign.name === '–ö–æ–∑–µ—Ä–æ–≥') {
            if (checkDate >= sign.start || checkDate <= sign.end) {
                return sign;
            }
        } else {
            if (checkDate >= sign.start && checkDate <= sign.end) {
                return sign;
            }
        }
    }
    return zodiacSigns[0]; // Default
}

// –í—ã—á–∏—Å–ª–∏—Ç—å —á–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ (–Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è)
function calculateLifePath(dateString) {
    const date = new Date(dateString);
    const dateStr = date.getFullYear().toString() + 
                    String(date.getMonth() + 1).padStart(2, '0') + 
                    String(date.getDate()).padStart(2, '0');
    
    let sum = 0;
    for (let char of dateStr) {
        sum += parseInt(char);
    }
    
    // –†–µ–¥—É–∫—Ü–∏—è –¥–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã (–∫—Ä–æ–º–µ master numbers 11, 22, 33)
    while (sum > 9 && sum !== 11 && sum !== 22 && sum !== 33) {
        sum = sum.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);
    }
    
    return sum;
}

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —á–∏—Å–µ–ª –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
function compareLifePath(lifePath1, lifePath2) {
    const compatibilityMatrix = {
        1: [1, 5, 7],
        2: [2, 4, 6, 8],
        3: [3, 6, 9],
        4: [2, 4, 8],
        5: [1, 5, 7],
        6: [2, 3, 6, 9],
        7: [1, 5, 7],
        8: [2, 4, 6, 8],
        9: [3, 6, 9],
        11: [2, 11, 22],
        22: [4, 11, 22],
        33: [6, 9, 33]
    };
    
    const compatible = compatibilityMatrix[lifePath1] || [];
    if (compatible.includes(lifePath2)) return 85;
    if (lifePath1 === lifePath2) return 75;
    return 50;
}

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
function compareZodiac(sign1, sign2) {
    if (sign1.name === sign2.name) return 70;
    
    const elementCompat = elements[sign1.element].compatible;
    if (elementCompat.includes(sign2.element)) return 85;
    
    // –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ –∑–Ω–∞–∫–∏ (—á–∞—Å—Ç–æ —Ö–æ—Ä–æ—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    const opposites = {
        '–û–≤–µ–Ω': '–í–µ—Å—ã', '–¢–µ–ª–µ—Ü': '–°–∫–æ—Ä–ø–∏–æ–Ω', '–ë–ª–∏–∑–Ω–µ—Ü—ã': '–°—Ç—Ä–µ–ª–µ—Ü',
        '–†–∞–∫': '–ö–æ–∑–µ—Ä–æ–≥', '–õ–µ–≤': '–í–æ–¥–æ–ª–µ–π', '–î–µ–≤–∞': '–†—ã–±—ã'
    };
    if (opposites[sign1.name] === sign2.name || opposites[sign2.name] === sign1.name) {
        return 75;
    }
    
    return 55;
}

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function compareElements(element1, element2) {
    if (element1 === element2) return 80;
    if (elements[element1].compatible.includes(element2)) return 90;
    return 50;
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–≤–æ–∑—Ä–∞—Å—Ç, —á–∏—Å–ª–∞ –∏ —Ç.–¥.)
function compareExtras(date1, date2) {
    const d1 = new Date(date1);
    const d2 = new Date(date2);
    
    // –†–∞–∑–Ω–∏—Ü–∞ –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ
    const ageDiff = Math.abs(d1.getFullYear() - d2.getFullYear());
    let ageScore = 100 - (ageDiff * 2);
    ageScore = Math.max(50, ageScore);
    
    // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ—Å—è—Ü–µ–≤
    const monthDiff = Math.abs(d1.getMonth() - d2.getMonth());
    const monthScore = monthDiff < 3 ? 80 : 60;
    
    return (ageScore * 0.6 + monthScore * 0.4);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function calculateCompatibility(svetaDate, guestDate) {
    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
    const svetaSign = getZodiacSign(svetaDate);
    const guestSign = getZodiacSign(guestDate);
    
    const svetaLifePath = calculateLifePath(svetaDate);
    const guestLifePath = calculateLifePath(guestDate);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    const metrics = {
        lifepathMatch: compareLifePath(svetaLifePath, guestLifePath),
        signAffinity: compareZodiac(svetaSign, guestSign),
        elementBalance: compareElements(svetaSign.element, guestSign.element),
        extras: compareExtras(svetaDate, guestDate)
    };
    
    // –í–µ—Å–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    const weights = {
        lifepath: 0.35,
        sign: 0.30,
        elements: 0.20,
        misc: 0.15
    };
    
    // –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    const index = Math.round(
        metrics.lifepathMatch * weights.lifepath +
        metrics.signAffinity * weights.sign +
        metrics.elementBalance * weights.elements +
        metrics.extras * weights.misc
    );
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏
    const interpretations = generateInterpretations(index, svetaSign, guestSign, svetaLifePath, guestLifePath);
    
    return {
        index,
        metrics,
        svetaSign,
        guestSign,
        svetaLifePath,
        guestLifePath,
        interpretations
    };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π
function generateInterpretations(index, svetaSign, guestSign, svetaLP, guestLP) {
    let strength, risk, advice;
    
    // –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
    if (index >= 80) {
        strength = `–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –≥–∞—Ä–º–æ–Ω–∏—è! –í–∞—à–∏ —ç–Ω–µ—Ä–≥–∏–∏ —Å–ø–ª–µ—Ç–∞—é—Ç—Å—è –≤ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∞–Ω–µ—Ü. ${svetaSign.name} –∏ ${guestSign.name} —Å–æ–∑–¥–∞—é—Ç –º–∞–≥–Ω–µ—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –≥–ª—É–±–æ–∫–æ–º –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–∏ –∏ –æ–±—â–∏—Ö –≤–∏–±—Ä–∞—Ü–∏—è—Ö –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏.`;
    } else if (index >= 60) {
        strength = `–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –≥–ª—É–±–æ–∫–æ–π —Å–≤—è–∑–∏! –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ä–∞–∑–ª–∏—á–∏—è, –≤–∞—à–∏ ${svetaSign.element === guestSign.element ? '—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ' : '–¥–æ–ø–æ–ª–Ω—è—é—â–∏–µ'} —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç –±–∞–ª–∞–Ω—Å. –ï—Å—Ç—å —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å –¥—Ä—É–≥ –≤ –¥—Ä—É–≥–µ.`;
    } else {
        strength = `–°–≤—è–∑—å —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—ã. ${svetaSign.name} –∏ ${guestSign.name} –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Ä–∞–∑–Ω—ã–µ –º–∏—Ä—ã, —á—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –≤–∑–∞–∏–º–Ω–æ–≥–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∏ —Ä–æ—Å—Ç–∞. –£—á–∏—Ç–µ—Å—å –¥—Ä—É–≥ —É –¥—Ä—É–≥–∞!`;
    }
    
    // –ó–æ–Ω—ã –≤–Ω–∏–º–∞–Ω–∏—è
    if (index >= 80) {
        risk = `–ë–µ—Ä–µ–≥–∏—Ç–µ—Å—å —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ–≥–æ —Å–ª–∏—è–Ω–∏—è - –∫–∞–∂–¥–æ–º—É –≤–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–≤–æ—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å. –ù–µ —Ä–∞—Å—Ç–≤–æ—Ä—è–π—Ç–µ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥—Ä—É–≥ –≤ –¥—Ä—É–≥–µ, —Ü–µ–Ω–∏—Ç–µ –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ.`;
    } else if (index >= 60) {
        risk = `–í–æ–∑–º–æ–∂–Ω—ã –ø–µ—Ä–∏–æ–¥—ã –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏—è –∏–∑-–∑–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –∂–∏–∑–Ω–∏. –ö–ª—é—á - –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–ª—ã—à–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –º–µ–ª–∫–∏–µ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è.`;
    } else {
        risk = `–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ —Ç—Ä–µ–±—É—é—Ç —Ç–µ—Ä–ø–µ–Ω–∏—è –∏ –ø—Ä–∏–Ω—è—Ç–∏—è. –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –£–≤–∞–∂–∞–π—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –¥–∞–π—Ç–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ä–æ—Å—Ç–∞.`;
    }
    
    // –°–æ–≤–µ—Ç
    if (index >= 80) {
        advice = `‚ú® –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º–µ—á—Ç–∞–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –í–∞—à–∞ —Å–≤—è–∑—å - —Ä–µ–¥–∫–∏–π –¥–∞—Ä, —Ü–µ–Ω–∏—Ç–µ –µ—ë. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —á—Ç–æ-—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ!`;
    } else if (index >= 60) {
        advice = `üåü –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç–æ–º, —á—Ç–æ –≤–∞—Å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç. –ü—Ä–æ–≤–æ–¥–∏—Ç–µ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –≤–º–µ—Å—Ç–µ, –Ω–∞—Ö–æ–¥—è –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã. –í–∞—à–∞ —Å–≤—è–∑—å –∫—Ä–µ–ø–Ω–µ—Ç —á–µ—Ä–µ–∑ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –æ–ø—ã—Ç.`;
    } else {
        advice = `üí´ –ü—Ä–∏–º–∏—Ç–µ –≤–∞—à–∏ —Ä–∞–∑–ª–∏—á–∏—è –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã. –£—á–∏—Ç–µ—Å—å –¥—Ä—É–≥ —É –¥—Ä—É–≥–∞, –±—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã. –ò–Ω–æ–≥–¥–∞ —Å–∞–º—ã–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–æ—é–∑—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å–∞–º—ã–º–∏ —Ü–µ–Ω–Ω—ã–º–∏.`;
    }
    
    return { strength, risk, advice };
}

// –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã (—Ä–∞–Ω–¥–æ–º–Ω—ã–µ)
const magicFacts = [
    "üåô –í–∞—à–∏ –¥—É—à–∏ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å –≤ –ø—Ä–æ—à–ª—ã—Ö –∂–∏–∑–Ω—è—Ö, –∏ —ç—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞ - –Ω–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å.",
    "‚ú® –ß–∏—Å–ª–∞ –≤–∞—à–∏—Ö –¥–∞—Ç —Ä–æ–∂–¥–µ–Ω–∏—è —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –º–∞—Å—Ç–µ—Ä-—á–∏—Å–ª–æ, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ—Å–æ–±—É—é –º–∏—Å—Å–∏—é.",
    "üîÆ –ü–ª–∞–Ω–µ—Ç—ã –≤ –º–æ–º–µ–Ω—Ç –≤–∞—à–∏—Ö —Ä–æ–∂–¥–µ–Ω–∏–π —Å–æ–∑–¥–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —É–∑–æ—Ä.",
    "‚≠ê –í–∞—à–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è —Ä–µ–∑–æ–Ω–∏—Ä—É—é—Ç –Ω–∞ —á–∞—Å—Ç–æ—Ç–µ –¥—Ä–µ–≤–Ω–∏—Ö –∑–Ω–∞–Ω–∏–π.",
    "üåü –ê—Å—Ç—Ä–æ–ª–æ–≥–∏ –≥–æ–≤–æ—Ä—è—Ç: —Ç–∞–∫–∏–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ä–∞–∑ –≤ —Å–æ—Ç–Ω—é –ª–µ—Ç.",
    "üí´ –í–∞—à–∏ –∞—É—Ä—ã —Å–æ–∑–¥–∞—é—Ç —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ü–≤–µ—Ç–æ–≤–æ–π —Å–ø–µ–∫—Ç—Ä –ø—Ä–∏ —Å–æ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–∏.",
    "üå† –í –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ –≤–∞—à —Å–æ—é–∑ –æ–±–æ–∑–Ω–∞—á–µ–Ω –∫–∞–∫ '–ü—É—Ç—å –ü—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—è'.",
    "üé≠ –í–∞—à–∏ –∞—Ä—Ö–µ—Ç–∏–ø—ã –¥–æ–ø–æ–ª–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞, –∫–∞–∫ –∏–Ω—å –∏ —è–Ω.",
    "ü¶ã –ì–æ–≤–æ—Ä—è—Ç, –±–∞–±–æ—á–∫–∏ –º–∞—à—É—Ç –∫—Ä—ã–ª—å—è–º–∏ —Å–∏–ª—å–Ω–µ–µ, –∫–æ–≥–¥–∞ –≤—ã —Ä—è–¥–æ–º.",
    "üå∏ –î—Ä–µ–≤–Ω–∏–µ –º—É–¥—Ä–µ—Ü—ã –Ω–∞–∑—ã–≤–∞–ª–∏ —Ç–∞–∫–∏–µ —Å–≤—è–∑–∏ '–¢–∞–Ω—Ü–µ–º –°—É–¥—å–±—ã'."
];

function getRandomMagicFact() {
    return magicFacts[Math.floor(Math.random() * magicFacts.length)];
}

