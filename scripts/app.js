// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const state = {
    svetaDate: null,
    guests: [],
    currentGuestIndex: 0,
    results: []
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    loadState();
    checkIfConfigured();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
function loadState() {
    const saved = localStorage.getItem('compatibilityState');
    if (saved) {
        const loaded = JSON.parse(saved);
        state.svetaDate = loaded.svetaDate;
        state.guests = loaded.guests || [];
        renderGuestsList();
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
function saveState() {
    localStorage.setItem('compatibilityState', JSON.stringify({
        svetaDate: state.svetaDate,
        guests: state.guests
    }));
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
function checkIfConfigured() {
    // –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –°–≤–µ—Ç—ã
    state.svetaDate = '1994-10-30';
    saveState();
    
    if (state.guests && state.guests.length > 0) {
        showScreen('guestsScreen');
    } else {
        showScreen('setupScreen');
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    document.getElementById(screenId).classList.add('active');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function saveSettings() {
    // –î–∞—Ç–∞ –°–≤–µ—Ç—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: 30.10.1994
    state.svetaDate = '1994-10-30';
    saveState();
    showScreen('guestsScreen');
}

// –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Å—Ç—è
function addGuest() {
    const nameInput = document.getElementById('guestName');
    const dateInput = document.getElementById('guestBirthDate');
    
    const name = nameInput.value.trim();
    const birthDate = dateInput.value;
    
    if (!name || !birthDate) {
        alert('–ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è');
        return;
    }
    
    const guest = {
        id: Date.now(),
        name,
        birthDate,
        icon: getRandomIcon()
    };
    
    state.guests.push(guest);
    saveState();
    renderGuestsList();
    
    // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    nameInput.value = '';
    dateInput.value = '';
    nameInput.focus();
}

// –£–¥–∞–ª–∏—Ç—å –≥–æ—Å—Ç—è
function removeGuest(id) {
    state.guests = state.guests.filter(g => g.id !== id);
    saveState();
    renderGuestsList();
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –≥–æ—Å—Ç–µ–π
function renderGuestsList() {
    const list = document.getElementById('guestsList');
    const count = document.getElementById('guestCount');
    
    count.textContent = state.guests.length;
    
    if (state.guests.length === 0) {
        list.innerHTML = '<p style="color: var(--text-muted); text-align: center; padding: 40px;">–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>';
        return;
    }
    
    list.innerHTML = state.guests.map((guest, index) => `
        <div class="guest-item" onclick="checkGuestCompatibility(${index})" title="–ù–∞–∂–º–∏ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å">
            <div class="guest-info">
                <div class="guest-avatar">${guest.icon}</div>
                <div class="guest-details">
                    <h4>${guest.name}</h4>
                    <p>${formatDate(guest.birthDate)}</p>
                </div>
            </div>
            <button class="guest-remove" onclick="event.stopPropagation(); removeGuest(${guest.id})">‚úï</button>
        </div>
    `).join('');
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
    const date = new Date(dateString);
    const months = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'];
    return `${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()}`;
}

// –†–∞–Ω–¥–æ–º–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –¥–ª—è –≥–æ—Å—Ç—è
function getRandomIcon() {
    const icons = ['‚≠ê', 'üåü', '‚ú®', 'üí´', 'üåô', '‚òÄÔ∏è', 'üåà', 'ü¶ã', 'üå∏', 'üçÄ', 'üé≠', 'üé®', 'üé™', 'üéØ', 'üé≤'];
    return icons[Math.floor(Math.random() * icons.length)];
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Å—Ç—è
function checkGuestCompatibility(index) {
    if (index < 0 || index >= state.guests.length) {
        alert('–ì–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    state.currentGuestIndex = index;
    showCompatibilityForGuest(index);
}

// –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (—É—Å—Ç–∞—Ä–µ–ª–æ, —Ç–µ–ø–µ—Ä—å –∫–ª–∏–∫–∞–µ–º –Ω–∞ –≥–æ—Å—Ç—è)
function startCalculations() {
    if (state.guests.length === 0) {
        alert('–î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
        return;
    }
    
    state.currentGuestIndex = 0;
    state.results = [];
    showCompatibilityForGuest(0);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è –≥–æ—Å—Ç—è
function showCompatibilityForGuest(index) {
    if (index >= state.guests.length) {
        // –í—Å–µ –≥–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        showScreen('guestsScreen');
        alert('–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã! üéâ');
        return;
    }
    
    const guest = state.guests[index];
    state.currentGuestIndex = index;
    
    showScreen('resultScreen');
    
    // –í–ê–ñ–ù–û: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    stopMandalaAnimation();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–Ω–¥–∞–ª—É –∏ –∞–Ω–∏–º–∞—Ü–∏—é
    document.getElementById('mandalaContainer').style.display = 'block';
    document.getElementById('resultContainer').style.display = 'none';
    
    // –û—á–∏—â–∞–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç
    document.getElementById('magicFact').style.display = 'none';
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    startMandalaAnimation();
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è –¢–ï–ö–£–©–ï–ì–û –≥–æ—Å—Ç—è
    setTimeout(() => {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≥–æ—Å—Ç—è –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const currentGuest = state.guests[state.currentGuestIndex];
        if (!currentGuest) {
            console.error('–ì–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∏–Ω–¥–µ–∫—Å—É:', state.currentGuestIndex);
            return;
        }
        
        console.log('–†–∞—Å—á—ë—Ç –¥–ª—è:', currentGuest.name, currentGuest.birthDate);
        
        const result = calculateCompatibility(state.svetaDate, currentGuest.birthDate);
        result.guestName = currentGuest.name;
        result.guestIcon = currentGuest.icon;
        
        state.results[state.currentGuestIndex] = result; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É
        displayResult(result);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        stopMandalaAnimation();
    }, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã –∞–Ω–∏–º–∞—Ü–∏–∏
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function displayResult(result) {
    console.log('–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è:', result.guestName, '–ò–Ω–¥–µ–∫—Å:', result.index);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –º–∞–Ω–¥–∞–ª—É
    document.getElementById('mandalaContainer').style.display = 'none';
    document.getElementById('resultContainer').style.display = 'block';
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è - –ò–ú–Ø –ì–û–°–¢–Ø
    const guestNameElement = document.getElementById('guestName');
    guestNameElement.textContent = result.guestName;
    guestNameElement.style.animation = 'none';
    setTimeout(() => {
        guestNameElement.style.animation = 'fadeInScale 0.6s ease-out';
    }, 10);
    
    document.getElementById('guestIcon').textContent = result.guestIcon;
    
    // –ê–Ω–∏–º–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å 0 –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    animateValue('compatValue', 0, result.index, 1000);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–ª—å—Ü–∞
    const ring = document.getElementById('compatRing');
    const circumference = 339.292;
    const offset = circumference - (result.index / 100 * circumference);
    ring.style.strokeDashoffset = offset;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã
    document.getElementById('strengthText').textContent = result.interpretations.strength;
    document.getElementById('riskText').textContent = result.interpretations.risk;
    document.getElementById('adviceText').textContent = result.interpretations.advice;
    
    // –ì–ª–∏—Ñ—ã
    document.getElementById('glyphLifePath').textContent = Math.round(result.metrics.lifepathMatch);
    document.getElementById('glyphZodiac').textContent = Math.round(result.metrics.signAffinity);
    document.getElementById('glyphElements').textContent = Math.round(result.metrics.elementBalance);
    document.getElementById('glyphEnergy').textContent = Math.round(result.metrics.extras);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∑–Ω–∞–∫–∞ –≥–æ—Å—Ç—è
    document.getElementById('guestIcon').textContent = result.guestSign.icon;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç
    document.getElementById('magicFact').style.display = 'none';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç
function showMagicFact() {
    const factDiv = document.getElementById('magicFact');
    const factText = document.getElementById('magicFactText');
    
    if (factDiv.style.display === 'none') {
        factText.textContent = getRandomMagicFact();
        factDiv.style.display = 'block';
    } else {
        factDiv.style.display = 'none';
    }
}

// –°–ª–µ–¥—É—é—â–∏–π –≥–æ—Å—Ç—å
function nextGuest() {
    const nextIndex = state.currentGuestIndex + 1;
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≥–æ—Å—Ç—é. –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å:', state.currentGuestIndex, '–°–ª–µ–¥—É—é—â–∏–π:', nextIndex);
    showCompatibilityForGuest(nextIndex);
}

// –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
function backToGuestList() {
    showScreen('guestsScreen');
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
function exportResults() {
    const dataStr = JSON.stringify(state.results, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'compatibility_results.json';
    link.click();
}

// –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
function resetAll() {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        localStorage.removeItem('compatibilityState');
        state.svetaDate = null;
        state.guests = [];
        state.currentGuestIndex = 0;
        state.results = [];
        stopMandalaAnimation();
        showScreen('setupScreen');
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–ª–∞ –æ—Ç start –¥–æ end
function animateValue(elementId, start, end, duration) {
    const element = document.getElementById(elementId);
    const range = end - start;
    const increment = range / (duration / 16); // 60 FPS
    let current = start;
    
    const timer = setInterval(() => {
        current += increment;
        if ((increment > 0 && current >= end) || (increment < 0 && current <= end)) {
            current = end;
            clearInterval(timer);
        }
        element.textContent = Math.round(current);
    }, 16);
}

